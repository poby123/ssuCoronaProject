<%-include('./partials/header.ejs')%>
<section class="sectionCorona">
  <% 
  /*{날짜: 수} 방식의 객체*/
  let decideCnt_coronaObj = {};
  let examCnt_coronaObj = {};
  let clearCnt_coronaObj = {};
  let deathCnt_coronaObj = {};

  /*일일 확진자 수를 편리하게 계산하기 위해 만든 배열*/
  let decideCnt = [];
  let examCnt = [];
  let clearCnt = [];
  let deathCnt = [];
  let dates = [];

  let i=0, totalNum=0;

  if(coronaData){ 
      /*arrows*/
      const upArrow = 'fas fa-sort-up';
      const downArrow = 'fas fa-sort-down';
      const dash = ''

      /*날짜 파싱*/
      function parse(str) {
        if (!/^(\d){8}$/.test(str)) return "invalid date";
        var y = str.substr(0, 4),
          m = str.substr(4, 2) - 1,
          d = str.substr(6, 2);
        return new Date(y, m, d);
      }

      /*객체 정렬을 위한 비교함수*/
      function sortObjectCri(a, b){
        let arr_a = a.split('.');
        let arr_b = b.split('.');
        for(let i=0;i<3;++i){
          if(Number(arr_a[i]) > Number(arr_b[i])){
            return 1;
          }
        }
        return -1;
      }

      /*객체 정렬*/
      function sortObject(o){
        let sorted = {};
        let k;
        let a = [];
        for(key in o){
          if(o.hasOwnProperty(key)){
            a.push(key);
          }
        }
        a.sort(sortObjectCri);
        for(key=0;key<a.length;++key){
          sorted[a[key]] = o[a[key]];
        }

        return sorted;
      }

      /*받은 데이터를 돌면서 객체에 정보 추가 - 공공데이터 포털의 API에서 업데이트 정보를, 그와 같은 날짜의 정보보다 먼저주면 오류가 생길 수도 있다.*/
      for (let i = 0; i < coronaData.length; ++i) {
        let stateDt = coronaData[i].stateDt + '';
        const date = parse(stateDt);
        let dateString = (date.getFullYear()) + "." + (date.getMonth() + 1) + "." + date.getDate() + " ";
        decideCnt_coronaObj[dateString] = coronaData[i].decideCnt;
        examCnt_coronaObj[dateString] = coronaData[i].examCnt;
        clearCnt_coronaObj[dateString] = coronaData[i].clearCnt;
        deathCnt_coronaObj[dateString] = coronaData[i].deathCnt;
      }
  
      /*object sort*/
      decideCnt_coronaObj = sortObject(decideCnt_coronaObj);
      examCnt_coronaObj = sortObject(examCnt_coronaObj);
      clearCnt_coronaObj = sortObject(clearCnt_coronaObj);
      deathCnt_coronaObj = sortObject(deathCnt_coronaObj);

      /*일일 사망자 수*/
      for (const [key, value] of Object.entries(deathCnt_coronaObj)) {
        deathCnt.push(value);
        ++totalNum; /*중복없이 센 개수*/
      }
  
      /*일일 격리해제 수*/
      for (const [key, value] of Object.entries(clearCnt_coronaObj)) {
        clearCnt.push(value);
      }
  
      /*일일 검사수*/
      for (const [key, value] of Object.entries(examCnt_coronaObj)) {
        examCnt.push(value);
      }
  
      /*일일 확진자 수*/
      for (const [key, value] of Object.entries(decideCnt_coronaObj)) {
        decideCnt.push(value);
        dates.push(key);
      }

      /*가장 최근 데이터의 증가수*/
      let increasedDecide = decideCnt[totalNum-1] - decideCnt[totalNum-2];
      let increasedExam = examCnt[totalNum-1] - examCnt[totalNum-2];
      let increasedClear = clearCnt[totalNum-1] - clearCnt[totalNum-2];
      let increasedDeath = deathCnt[totalNum-1] - deathCnt[totalNum-2];

      /*가장 최근 데이터의 증가수에 따른 화살표 종류*/
      const arrowDecide = increasedDecide  == 0 ? dash : (increasedDecide > 0 ? upArrow : downArrow);
      const arrowExam = increasedExam  == 0 ? dash : (increasedExam > 0 ? upArrow : downArrow);
      const arrowClear = increasedClear == 0 ? dash : (increasedClear > 0 ? upArrow : downArrow);
      const arrowDeath = increasedDeath == 0 ? dash : (increasedDeath > 0 ? upArrow : downArrow);

      /*출력할 때는 부호없이 출력*/
      increasedDecide = Math.abs(increasedDecide);
      increasedExam = Math.abs(increasedExam);
      increasedClear = Math.abs(increasedClear);
      increasedDeath = Math.abs(increasedDeath);

      /*가장 최근 데이터의 날짜*/
      const todayDate = dates[totalNum-1];
    %>
  <div class="corona-container">
    <h3>COVID-19 국내 상황</h3>
    <div class="today-corona">
      <div class="today-corona-element text-red">
        <h5>확진환자</h5>
        <p class="total" id="today_decide"><%=decideCnt[totalNum-1]%></p>
        <p><%=increasedDecide%><i class="<%=arrowDecide%>"></i></p>
      </div>
      <hr>
      <div class="today-corona-element text-yellow">
        <h5>검사 중</h5>
        <p class="total" id="today_exam"><%=examCnt[totalNum-1]%></p>
        <p><%=increasedExam%><i class="<%=arrowExam%>"></i></p>
      </div>
      <hr>
      <div class="today-corona-element text-blue">
        <h5>격리해제</h5>
        <p class="total" id="today_clear"><%=clearCnt[totalNum-1]%></p>
        <p><%=increasedClear%><i class="<%=arrowClear%>"></i></p>
      </div>
      <hr>
      <div class="today-corona-element text-black">
        <h5>사망자</h5>
        <p class="total" id="today_decide"><%=deathCnt[totalNum-1]%></p>
        <p><%=increasedDeath%><i class="<%=arrowDeath%>"></i></p>
      </div>
    </div>
    <h5 class="align-right">( <%=todayDate%>,
      00:00 집계 기준)
    </h5>
    <hr>
    <div class="chart-container">
      <canvas id="myChart">
        Your browser does not support canvas.
      </canvas>
    </div>
  </div>
  <%} else { %>
  코로나 데이터를 불러올 수 없습니다.
  <%}%>
</section>
<%-include('./partials/tail.ejs')%>
  <script>
    let increased = [];
    let dates = [];
    let backgroundColors = [];
    let borderColors = [];
  <%
    i = 0;
    for (const [key, value] of Object.entries(decideCnt_coronaObj)) {
      if (i > 0) {
    %>
        dates.push("<%=key.substr(5)%>");
        increased.push(<%=decideCnt[i] %> - <%=decideCnt[i - 1] %>);
        backgroundColors.push('rgb(255, 99, 132,0.2)');
        borderColors.push('rgba(255,99,132,1)');
      <%}
      ++i;
    }
  %>
    var ctx = document.getElementById("myChart").getContext('2d');
    var myChart = new Chart(ctx, {
      type: 'bar',
      data: {
        labels: dates,
        datasets: [{
          label: '일별 확진자 수',
          data: increased,
          backgroundColor: backgroundColors,
          borderColor: borderColors,
          borderWidth: 1
        }]
      },
      options: {
        maintainAspectRatio: true, // default value. false일 경우 포함된 div의 크기에 맞춰서 그려짐.
        scales: {
          yAxes: [{
            ticks: {
              beginAtZero: true
            }
          }]
        }
      }
    });
  </script>
  </body>
  </html>